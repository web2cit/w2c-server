doctype html
html(
  xmlns="http://www.w3.org/1999/xhtml"
  prefix="z:http://www.zotero.org/namespaces/export#"
)
  head
    title= t('results.title')
    style.
      section {
        padding-left: 1%;
      }
      th, td {
        border: 1px solid;
      }
      table {
        border-collapse: collapse;
        text-align: center;
      }
      table.output {
        margin: 0 auto;
      }
    - const citation = citations[0];
    if citation !== undefined
      link(
        rel="canonical"
        href=citation.url
      )
      each datum in citation.data
        meta(
          property=`${datum.prefix}:${datum.field}`
          content=datum.content
        )
  body
    header
      h1!= t('results.header', { domain: `<i>${domain}</i>`, interpolation: { escapeValue: false } })
      - const storageRoot = storage.instance + storage.wiki + storage.prefix;
      - const storagePath = storageRoot + storage.path;
      p
        | #{t('results.config')}
        |
        a(
          href=`${storage.instance + storage.wiki}Special:PrefixIndex/${storage.prefix + storage.path}`
          target="_blank"
        )= storageRoot
    // results area
    main
      each pattern in patterns
        // pattern block
        section.pattern
          - const context = pattern.label === undefined ? "unlabelled" : "labelled";
          h2
            = t('results.pattern', { pattern: pattern.pattern, label: pattern.label, context })
            |
            | (
            a(
              href= storagePath + storage.filenames.patterns
              target="_blank"
            )= t('results.edit')
            | )
          each target in pattern.targets
            // target block
            section.target-block
              header
                h3
                  | #{t('results.target')}
                  |
                  a(href=target.href target="_blank")= target.path
              main.translation-list
                each translation, index in target.translations
                  - 
                    const label = translation.template.label;
                    let path = translation.template.path;
                    path = path && `<i>${path}</i>`
                    let context;
                    if (path === undefined) context = "fallback";
                    else if (label === undefined) context = "unlabelled";
                    else context = "labelled";
                  section.translation-block
                    h5= t('results.template', { index: index + 1, label, context } )
                    if path
                      p!= t('results.templatePath', { path, interpolation: { escapeValue: false } })
                    table.translation-table
                      thead
                        tr
                          th= t('results.fieldHeader')
                          th
                            = t('results.outputHeader')
                            br
                            | (
                            a(
                              href=storagePath + storage.filenames.templates
                              target="_blank"
                            )= t('results.edit')
                            | )
                          th
                            = t('results.testHeader')
                            br
                            | (
                            a(
                              href=storagePath + storage.filenames.tests
                              target="_blank"
                            )= t('results.edit')
                            | )
                          th= t('results.scoreHeader')
                      tbody
                        each field in translation.fields
                          tr
                            td
                              = t('fields.' + field.name)
                              br
                              | (#{field.name})
                            if (field.output === undefined)
                              td= t('results.nonApplicable')
                            else
                              td
                                table.output
                                  tbody
                                    each value in field.output
                                      tr
                                        td= value
                            if (field.test === undefined)
                              td= t('results.nonApplicable')
                            else
                              td
                                table.output
                                  tbody
                                    each value in field.test
                                      tr
                                        td= value
                            if field.score === undefined 
                              td= t('results.nonApplicable')
                            else
                              td field.score
              footer
                if debug
                  h4= t('results.debug')
    footer
    // if debug=false, link to debug version of results